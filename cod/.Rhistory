CASE
WHEN charges > promedio_cargos THEN '1'
ELSE '0'
END AS charges_mayor_promedio
FROM BaseDatos2 AS tbl
LEFT JOIN (
SELECT
sex,
AVG(charges) AS promedio_cargos
FROM BaseDatos2
GROUP BY sex
) AS tbl_sex
ON tbl.sex = tbl_sex.sex
"
tbl <- tbl(
con.lite,
sql(query)) %>%
collect()
View(tbl)
library(DBI)
library(RSQLite)
con.lite <- dbConnect(RSQLite::SQLite(), "creditos_personales.sqlite")
DBI::dbListTables(con.lite)
iris %>% head()
iris %>% head()
library(tidyverse)
iris %>% head()
data.iris <- iris
data.irirs %>%  head(2)
data.iris <- iris
data.irirs %>%  head(2)
data.iris %>%  head(2)
DBI::dbWriteTable(con.lite,
"Iris",
data.iris,
overwrite = TRUE,
row.names = FALSE)
DBI::dbWriteTable(
con.lite,
"Iris",
data.iris,
overwrite = TRUE,
field.types = c(
Sepal.Length = "REAL",
Sepal.Width = "REAL",
Petal.Length = "REAL",
Peta.Width = "REAL",
Species = "TEXT"
),
row.names = FALSE
)
DBI::dbWriteTable(
con.lite,
"Iris",
data.iris,
overwrite = TRUE,
field.types = c(
Sepal.Length = "REAL",
Sepal.Width = "REAL",
Petal.Length = "REAL",
Petal.Width = "REAL",
Species = "TEXT"
),
row.names = FALSE
)
DBI::dbListTables(con.lite)
con.lite <- dbConnect(SQLite(), 'BaseDatos2.sqlite')
DBI::dbListTables(con.lite)
con.lite <- DBI::dbConnect(RSQLite::SQLite(),
dbname = "BaseDatos2.sqlite")
DBI::dbListTables(con.lite)
data.iris <- iris
data.iris %>%  head(2)
DBI::dbWriteTable(con.lite,
"Iris",
data.iris,
overwrite = TRUE,
row.names = FALSE)
DBI::dbListTables(con.lite)
con.lite <- DBI::dbConnect(RSQLite::SQLite(),
dbname = "BaseDatos2.sqlite")
DBI::dbListTables(con.lite)
data.iris <- iris
data.iris %>%  head(2)
DBI::dbWriteTable(con.lite,
"Iris",
data.iris,
overwrite = TRUE,
row.names = FALSE)
DBI::dbWriteTable(
con.lite,
"Iris",
data.iris,
overwrite = TRUE,
field.types = c(
Sepal.Length = "REAL",
Sepal.Width = "REAL",
Petal.Length = "REAL",
Petal.Width = "REAL",
Species = "TEXT"
),
row.names = FALSE
)
View(Iris.sql)
library(reticulate)
library(reticulate)
library(reticulate)
library(reticulate)
source_python("ejemplo_r_to_py.py")
View(variable)
variable %>%
as.data.frame()
library(tidyverse)
```
variable %>%
as.data.frame()
data.frame(
id = 1:3,
letras = c("A","B","C")
)
Datos.CA0305 <- data.frame(
id = 1:3,
letras = c("A","B","C")
)
source("codigo_R.R")
View(Datos.CA0305)
library(DBI)
library(RSQLite)
con.lite <- dbConnect(RSQLite::SQLite(), "creditos_personales.sqlite")
datos.reales <- read.table("horizons_results.txt")
library(tidyverse)
datos.reales <- read.table("horizons_results.txt")
datos.reales <- read.table("C:\Users\andre\OneDrive\Escritorio\SimulacionesAndrey\SimulacionesAndrey\horizons_results.txt")
datos.reales <- read.table("C:\\Users\\andre\\OneDrive\\Escritorio\\SimulacionesAndrey\\SimulacionesAndrey\\horizons_results.txt")
datos.reales <- read.table("C:\\Users\\andre\\OneDrive\\Escritorio\\SimulacionesAndrey\\SimulacionesAndrey\\datos_reales.txt")
datos.reales <- read.table("C:\\Users\\andre\\OneDrive\\Escritorio\\SimulacionesAndrey\\SimulacionesAndrey\\datos_reales.txt", header = TRUE)
datos.reales <- read.table("C:\\Users\\andre\\OneDrive\\Escritorio\\SimulacionesAndrey\\SimulacionesAndrey\\datos_reales.txt", header = TRUE)
datos.reales <- read.table("C:\\Users\\andre\\OneDrive\\Escritorio\\SimulacionesAndrey\\SimulacionesAndrey\\datos_reales.txt", header = TRUE)
datos.reales <- read.table("C:\\Users\\andre\\OneDrive\\Escritorio\\SimulacionesAndrey\\SimulacionesAndrey\\datos_reales.txt", header = TRUE)
datos.reales <- read.table("C:\\Users\\andre\\OneDrive\\Escritorio\\SimulacionesAndrey\\SimulacionesAndrey\\datos_reales.txt", header = TRUE)
datos.reales <- read.csv("C:\\Users\\andre\\OneDrive\\Escritorio\\SimulacionesAndrey\\SimulacionesAndrey\\datos_reales.txt")
datos.reales <- read.csv("C:\\Users\\andre\\OneDrive\\Escritorio\\SimulacionesAndrey\\SimulacionesAndrey\\datos_reales.txt")
datos.reales <- read.csv("C:\\Users\\andre\\OneDrive\\Escritorio\\SimulacionesAndrey\\SimulacionesAndrey\\datos_reales.txt")
datos.reales <- read.csv("C:\\Users\\andre\\OneDrive\\Escritorio\\SimulacionesAndrey\\SimulacionesAndrey\\datos_reales.txt")
)
)
datos.reales <- read.csv("C:\\Users\\andre\\OneDrive\\Escritorio\\SimulacionesAndrey\\SimulacionesAndrey\\datos_reales.txt")
view(datos_reles)
view(datos.reles)
view(datos.reales)
datos.reales <- datos.reales[,-c(9,15)]
view(datos.reales)
datos.reales <- datos.reales %>% select(Calendar.Date..TDB., X,Y,Z,VX,VY,VZ)
view(datos.reales)
library(lubridate)
library(dplyr)
datos.reales <- datos.reales %>%
mutate(fechas = as.Date(parse_date_time((Calendar.Date..TDB., orders = "Y-b!-d"))))
datos.reales <- datos.reales %>%
mutate(fechas = as.Date(parse_date_time(Calendar.Date..TDB., orders = "Y-b!-d")))
view(datos.reales)
#Colocar el formato de la fecha
datos.reales$Calendar.Date..TDB. <- gsub("A\\.D\\. ", "", datos.reales$Calendar.Date..TDB.)
view(datos.reales)
datos.reales$Calendar.Date..TDB. <- datos.reales$Calendar.Date..TDB. %>%  as.Date(format = "%Y-%b-%d")
view(datos.reales)
#Cargar el csv
datos.reales <- read.csv("C:\\Users\\andre\\OneDrive\\Escritorio\\SimulacionesAndrey\\SimulacionesAndrey\\datos_reales.txt")
#Escoger las columnas que nos interes
datos.reales <- datos.reales %>% select(Calendar.Date..TDB., X,Y,Z,VX,VY,VZ)
#Colocar el formato de la fecha
datos.reales$Calendar.Date..TDB. <- gsub("A\\.D\\. ", "", datos.reales$Calendar.Date..TDB.)
datos.reales$Calendar.Date..TDB. <- datos.reales$Calendar.Date..TDB. %>%  as.Date(format = "%Y-%b-%d %H:%M:%OS")
view(datos.reales)
#Cargar el csv
datos.reales <- read.csv("C:\\Users\\andre\\OneDrive\\Escritorio\\SimulacionesAndrey\\SimulacionesAndrey\\datos_reales.txt")
#Escoger las columnas que nos interes
datos.reales <- datos.reales %>% select(Calendar.Date..TDB., X,Y,Z,VX,VY,VZ)
#Colocar el formato de la fecha
datos.reales$Calendar.Date..TDB. <- gsub("A\\.D\\. ", "", datos.reales$Calendar.Date..TDB.)
view(datos.reales)
datos.reales$Calendar.Date..TDB. <- as.Date(ymd_hms(datos.reales$Calendar.Date..TDB.))
view(datos.reales)
glimpse(datos.reales)
library(reticulate)
source_python("ejemplo_r_to_py.py")
source_python("main.py")
source_python("main.py")
source_python("C:\\Users\\andre\\OneDrive\\Escritorio\\SimulacionesAndrey\\SimulacionesAndrey\\main.py")
View(variable)
source_python("C:\\Users\\andre\\OneDrive\\Escritorio\\SimulacionesAndrey\\SimulacionesAndrey\\main.py")
View(df)
source("LimpiezaDatos.R")
source("C:\\Users\\andre\\OneDrive\\Escritorio\\SimulacionesAndrey\\SimulacionesAndrey\\LimpiezaDatos.R")
View(datos.reales)
fecha.inicial <- ymd("2025-04-01")
dias <- 0:19
df$`t (días)` <- fecha.inicial + days(dias)
View(df)
df$`t (días)` <- fecha
datos.reales$Calendar.Date..TDB. <- fecha
names(df)[names(df) == "t (días)"] <- "fecha"
View(df)
names(datos.reales)[names(datos.reales) == "Calendar.Date..TDB."] <- "fecha"
View(datos.reales)
df_analisis <- left_join(datos.reales, df,by = fecha)
df_analisis <- left_join(datos.reales, df,by = "fecha")
View(df_analisis)
df_analisis <- left_join(df,datos.reales,by = "fecha")
View(df_analisis)
library(tidyverse)
df_analisis <- df_analisis %>% mutate(
r_calc = sqrt((r_x^2+r_y^2+r_z^2)),
r_real = sqrt((X^2+Y^2+Z^2)),
v_calc = sqrt((v_x^2+v_y^2+v_z^2)),
v_real = sqrt((VX^2+VY^2+VZ^2))
)
View(df_analisis)
df_analisis <- df_analisis %>%
select(r_calc, r_real, v_calc, v_real)
View(df_analisis)
source_python("C:\\Users\\andre\\OneDrive\\Escritorio\\SimulacionesAndrey\\SimulacionesAndrey\\main.py")
source("C:\\Users\\andre\\OneDrive\\Escritorio\\SimulacionesAndrey\\SimulacionesAndrey\\LimpiezaDatos.R")
fecha.inicial <- ymd("2025-04-01") # Cambiar según el caso
dias <- 0:19 # Cambiar según el caso
df$`t (días)` <- fecha.inicial + days(dias)
names(df)[names(df) == "t (días)"] <- "fecha"
names(datos.reales)[names(datos.reales) == "Calendar.Date..TDB."] <- "fecha"
df_analisis <- left_join(df,datos.reales,by = "fecha")
df_analisis <- df_analisis %>% mutate(
r_calc = sqrt((r_x^2+r_y^2+r_z^2)),
r_real = sqrt((X^2+Y^2+Z^2)),
v_calc = sqrt((v_x^2+v_y^2+v_z^2)),
v_real = sqrt((VX^2+VY^2+VZ^2))
)
df_analisis <- df_analisis %>%
select(fecha, r_calc, r_real, v_calc, v_real)
View(df_analisis)
df_analisis <- df_analisis %>%
mutate(
error_r = (abs(r_calc-r_real)/r_real)*100,
error_v = (abs(v_real-v_calc)/v_real)*100
)
df_analisis <- select(fecha, r_real, r_calc, error_r, v_real, v_calc, error_v)
df_analisis <- df_analisis %>%
select(fecha, r_real, r_calc, error_r, v_real, v_calc, error_v)
View(df_analisis)
source("C:/Users/andre/OneDrive/Escritorio/SimulacionesAndrey/SimulacionesAndrey/AnalisisDatos.R")
setwd("C:/Users/andre/OneDrive/Escritorio/UCR-TEC/2025/Primer Semestre 2025/Herramientas de Ciencia de Datos II/Ejemplo_R_Quarto_Python")
setwd("C:/Users/andre/OneDrive/Escritorio/UCR-TEC/2025/Primer Semestre 2025/Herramientas de Ciencia de Datos II/Repaso")
setwd("~/")
library(DBI)
library(tidyverse)
library(reticulate)
con <- dbConnect(RSQLite::SQLite(), "data/repaso_sql_python_r.db")
con <- dbConnect(RSQLite::SQLite(), "data/repaso_sql_python_r.db")
dbListTables(con)
data("iris"
data("iris")
dbWriteTable(con, "iris", iris, overwrite = TRUE)
dbListTables(con)
reticulate::repl_python()
import sqlite3
# En Python se usa conn en vez de con
conn = sqlite3.connect("data/repaso_sql_python_r.db")
cursor = conn.cursor()
cursor.execute)
'''
SELECT *
FROM iris
LIMIT 5;
'''
)
cursor.execute)
'''
SELECT *
FROM iris
LIMIT 5;
'''
)
cursor.execute)
'''
SELECT *
FROM iris
LIMIT 5
'''
)
import sqlite3
# En Python se usa conn en vez de con
conn = sqlite3.connect("data/repaso_sql_python_r.db")
cursor = conn.cursor()
cursor.execute)
'''
SELECT *
FROM iris
LIMIT 5
'''
)
import sqlite3
# En Python se usa conn en vez de con
conn = sqlite3.connect("data/repaso_sql_python_r.db")
cursor = conn.cursor()
cursor.execute(
'''
SELECT *
FROM iris
LIMIT 5
'''
)
rows = cursor.fetchall()
for row in rows:
print(row)
quit
dbGetQuery(con, "SELECT * FROM iris LIMIT 5;")
iris.5.r <- dbGetQuery(con, "SELECT * FROM iris LIMIT 5;")
tbl(con, sql("SELECT * FROM iris LIMIT 5;"))
tbl(con, sql("SELECT * FROM iris LIMIT 5"))
iris.5.r2 <- tbl(con,
sql(
"
SELECT *
FROM iris
LIMIT 5
"
)
)
iris.5.r2 <- tbl(con,
sql(
"
SELECT *
FROM iris
LIMIT 5
"
) # Hasta acá es una consulta
) %>%
collect()
View(iris.5.r2)
reticulate::repl_python()
import pandas as pd
iris_5 = pd.read_sql_query(
'''
SELECT *
FROM iris
LIMIT 5;
''',
conn
)
View(iris_5)
quit
setwd("C:/Users/andre/OneDrive/Escritorio/Cuencas/cod")
base <- read_csv(ruta)
library(tidyverse)
library(readr)
ruta <- "./data/Brujo/BaseBrujoModelo.csv"
base <- read_csv(ruta)
ruta <- "data/Brujo/BaseBrujoModelo.csv"
library(tidyverse)
library(readr)
ruta <- "data/Brujo/BaseBrujoModelo.csv"
base <- read_csv(ruta)
library(tidyverse)
library(readr)
ruta <- "././data/Brujo/BaseBrujoModelo.csv"
base <- read_csv(ruta)
library(tidyverse)
library(readr)
ruta <- "../../data/Brujo/BaseBrujoModelo.csv"
base <- read_csv(ruta)
view(base)
rownames(base)
base <- base %>%
column_to_rownames(var = 'fecha')
base <- base[order(as.Date(rownames(base))), ]
view(base)
base <- base[,-c(1)]
view(base)
library(ggplot2)
base %>% ggplot(aes(x = rownames(base), y = 'caudal_minimo')) %>%
geom_line()
base %>% ggplot(aes(x = rownames(base), y = 'caudal_minimo')) +
geom_line()
base %>% ggplot(aes(x = 'fecha', y = 'caudal_minimo')) +
geom_line()
## BASE PARA GRAFICAR
base_graf <- base
base_graf <- base_graf %>%
rownmaes_to_column('fecha')
base_graf <- base_graf %>%
rownames_to_column('fecha')
base_graf %>% ggplot(aes(x=fecha, y=caudal_minimo)) +
geom_line()+
labs(
x= 'Fecha', y= 'Caudal Mínimo', title = 'Caudal Mínimo para la cuenca Brujo')
## BASE PARA GRAFICAR
base_graf <- base
base_graf <- base_graf %>%
rownames_to_column('fecha') %>%
mutate(fecha= as.Date(fecha))
View(base_graf)
base_graf %>% ggplot(aes(x=fecha, y=caudal_minimo)) +
geom_line()+
labs(
x= 'Fecha', y= 'Caudal Mínimo', title = 'Caudal Mínimo para la cuenca Brujo') +
scale_x_date(date_labels = "%Y-%m", date_breaks = "1 month")
library(scales)
base_graf %>% ggplot(aes(x=fecha, y=caudal_minimo)) +
geom_line(color = "steelblue", linewidth = 1.5, linetype = "solid")+
labs(
x= 'Fecha', y= 'Caudal Mínimo', title = 'Caudal Mínimo para la cuenca Brujo') +
scale_x_date(date_labels = "%Y-%m", date_breaks = "1 month")+
theme_minimal()+
theme(axis.text.x = element_text(
angle= 45, hjust = 1, size= 10
),
plot.title = element_text(
hjust = 0.5, face = "bold"
))
base_graf %>% ggplot(aes(x=fecha, y=caudal_minimo)) +
geom_line(color = "steelblue", linewidth = 1, linetype = "solid")+
labs(
x= 'Fecha', y= 'Caudal Mínimo', title = 'Caudal Mínimo para la cuenca Brujo') +
scale_x_date(date_labels = "%Y-%m", date_breaks = "1 month")+
theme_minimal()+
theme(axis.text.x = element_text(
angle= 45, hjust = 1, size= 10
),
plot.title = element_text(
hjust = 0.5, face = "bold"
))
base_graf %>% ggplot(aes(x=fecha, y=caudal_minimo)) +
geom_line(color = "steelblue", linewidth = 1, linetype = "solid")+
labs(
x= 'Fecha', y= 'Caudal Mínimo', title = 'Caudal Mínimo para la cuenca Brujo') +
scale_x_date(date_labels = "%Y-%m", date_breaks = "1 year")+
theme_minimal()+
theme(axis.text.x = element_text(
angle= 45, hjust = 1, size= 10
),
plot.title = element_text(
hjust = 0.5, face = "bold"
))
base <- read_csv(ruta)
base <- base[, -c(1)]
View(base)
base <- base[order(as.Date('fecha'))]
base <- base[order(as.Date(fecha))]
base <- base[order(as.Date(base$fecha))]
library(lubridate)
base <- base %>%
mutate(fecha = floor_date(as.Date(fecha), "month")) %>%
arrange(fecha)
View(base)
base %>% ggplot(aes(x=fecha, y=caudal_minimo)) +
geom_line(color = "steelblue", linewidth = 1, linetype = "solid")+
labs(
x= 'Fecha', y= 'Caudal Mínimo', title = 'Caudal Mínimo para la cuenca Brujo') +
scale_x_date(date_labels = "%Y-%m", date_breaks = "1 year")+
theme_minimal()+
theme(axis.text.x = element_text(
angle= 45, hjust = 1, size= 10
),
plot.title = element_text(
hjust = 0.5, face = "bold"
))
base %>% ggplot(aes(x=fecha, y=caudal_minimo)) +
geom_line(color = "steelblue", linewidth = 1, linetype = "solid")+
labs(
x= 'Fecha', y= 'Caudal Mínimo', title = 'Caudal Mínimo para la cuenca Brujo 1981-1993') +
scale_x_date(date_labels = "%Y-%m", date_breaks = "1 year")+
theme_minimal()+
theme(axis.text.x = element_text(
angle= 45, hjust = 1, size= 10
),
plot.title = element_text(
hjust = 0.5, face = "bold"
))
print(head(base, 10))
library(astsa)
glimpse(base)
base_train = ts( base[1:100], start = 1981, frequency = 1)
base[[1:100]]
library(caret)
ts_data = ts(df$caudal_minimo, frecuency=12)
ts_data = ts(df$caudal_minimo, frequency=12)
ts_data = ts(df$caudal_minimo, frequency=12)
ts_data = ts(base$caudal_minimo, frequency=12)
train_index = createTimeSlices(1:length(ts_data),
initialWindow = floor(0.7*length(ts_data)),
horizon = floor(0.3*length(ts_data)),
fixedWindow = TRUE)
base_train <- ts_data[train_index$train[[1]]]
base_test <- ts_data[train_index$test[[1]]]
library(forecast)
autoplot(base_train, main = "Caudal Mínimo para la cuenca Brujo")+
autolayer(base_test, series = "Set de Prueba")
base_train <- ts(ts_data[train_index$train[[1]]], frequency=12)
base_test <- ts(ts_data[train_index$test[[1]]], frequency = 12)
base_test <- ts(ts_data[train_index$test[[1]]], frequency = 12, start = end(base_train)+c(0,1))
autoplot(base_train, main = "Caudal Mínimo para la cuenca Brujo")+
autolayer(base_test, series = "Set de Prueba")
autoplot(base_train, main = "Caudal Mínimo para la cuenca Brujo")+
autolayer(base_test, series = "Set de Prueba") + xlab("Fecha")+
ylab("Caudal Mínimo") + scale_color_manual(values = c("black","red"))+ theme_minimal()
autoplot(base_train, main = "Caudal Mínimo para la cuenca Brujo")+
autolayer(base_test, series = "Set de Prueba") + xlab("Fecha")+
ylab("Caudal Mínimo") + scale_color_manual(values = c("red","red"))+ theme_minimal()
autoplot(base_train, main = "Caudal Mínimo para la cuenca Brujo")+
autolayer(base_test, series = "Set de Prueba") + xlab("Fecha")+
ylab("Caudal Mínimo") + scale_color_manual(values = c("red","black"))+ theme_minimal()
autoplot(base_train, main = "Caudal Mínimo para la cuenca Brujo")+
autolayer(base_test, series = "Set de Prueba") + xlab("Fecha")+
ylab("Caudal Mínimo") + scale_color_manual(values = c("red","black"))
